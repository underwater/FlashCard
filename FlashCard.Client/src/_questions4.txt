Authentication, JWT Tokens, Identity etc.
- flow, exchange,

Angular Dialog service
- How does the dialog-service work

Error handling / Server side
- Handle errors (define own errors 600 - 899) for EF?
- try-catch blocks
- Built-In Middleware /  UseExceptionHandler
- Custom Action Filters.

Error handling / Client Side
- display friendly message to user via global http inteceptor

CORS / Angular Proxy
- Using of a proxy file, means we don't need to think about CORS right ?

JavaScript Basics
Context, scope Callbacks and closure, this, lambda functions
Arrow functions don't have their own 'context' or 'this' (why?)
In other words, handlers that are expressed as lambda function can't have 'this' reference pointing to event emitter?

NODE JS
-------
EVENT emitters
When the EventEmitter object emits an event, all of the functions attached to that
specific event are called synchronously. All values returned by the called listeners are ignored and will be discarded.
because single event may have several subscribers, and return value could become ambiguous

Overloading in JS
In JS it is not necessary to match invocation of function with signature of functions? How does that work? (in other words an async method will accept both a single call back or a separate one for errors).
Since JS doesn't support overloading, how are below variations handled at runtime?
app.use(function (err, req, res, next)
app.use(function (req, res, next)
app.use(function (req, res)
etc.

ERROR Handling
-	The JavaScript try…catch mechanism cannot be used to intercept errors generated by asynchronous APIs…
-	Asynchronous functions (i.e. functions that take a call back) use a pattern of taking another callback dedicated to errors (error first callback)
-	Asynchronous functions that return a promise, should use the catch mechanism?
-	What about async / await can we use try / catch ?

Event Loop
Confused by single threaded NodeJs nature, its asynchrony,
Read that Node is inherently single threaded,
So all work must be done by single threaded event loop, that can delegate IO asynchrounous via callbacketc
option #1 use child processes (seperate nodejs processes) to offload CPU bound work, and communicate via  IPC (std in / std out streams)
option #2  WORKERs THREADS ?? and how are they different from CHILD PROCESSes?

STREAMS /
What is STD IN, STD OUT, STD ERROR
Is that an Interprocess Communication Protocol IPC implemented by NODE JS to communicate between processes?
Is it also used for I/O operations? Are I/O operations by considered seperate processes?
Is it also used to communicate between threads ? (or are there simply no threads in Node?)

DEBUGGING
The Chrome V8 engine in Nodejs implements a protocol called the V8 Inspector Protocol or Chrome Debugging Protocol /
it provides debugging clients with a way to communicate with the engine itself (using web sockets)
How to attach from VSCode / How to attach from Chrome
Do we need to launch node with  –inspect and (how is that different from –debug)?

Express
- Is app.get() the same as  app.use () but limiting it to a GET method?
- is router.use() the same as app.use but allows us to introduce prefixes  and simplify typing?
- difference between (middleware function signature) (req, res, next) and simply a function (req, res) (when is latter used?)

Note: Express middleware is broken up into different types based on the number of arguments your middleware function takes.
A middleware function that takes 4 arguments is classified as "error handling middleware",
and will only get called if an error occurs.


https://thecodebarbarian.com/80-20-guide-to-express-error-handling
